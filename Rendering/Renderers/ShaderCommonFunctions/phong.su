struct MaterialInfo {
    vec3 Ka; // Ambient reflectivity
    vec3 Kd; // Diffuse reflectivity
    vec3 Ks; // Specular reflectivity
    float Shininess; // Specular shininess factor
};

struct LightInfo {
    vec4 Position; // Light position in eye coords.
    vec3 La; // Ambient light intensity
    vec3 Ld; // Diffuse light intensity
    vec3 Ls; // Specular light intensity
};
vec3 phongModel( vec3 VertexPosition,vec3 VertexNormal,mat3 NormalMatrix ,
		 mat4 ModelViewMatrix,
		 LightInfo light, MaterialInfo matInfo )
{
    vec3 norm = normalize( NormalMatrix * VertexNormal);
    vec4 position = ModelViewMatrix * vec4(VertexPosition,1.0);
    vec3 s = normalize(vec3(light.Position - position));
    vec3 v = normalize(-position.xyz);
    vec3 r = reflect( -s, norm );
    vec3 ambient = light.La * matInfo.Ka;
    float sDotN = max( dot(s,norm), 0.0 );
    vec3 diffuse = light.Ld * matInfo.Kd * sDotN;
    vec3 spec = vec3(0.0);
    if( sDotN > 0.0 )
	spec = light.Ls * matInfo.Ks *
		pow( max( dot(r,v), 0.0 ), matInfo.Shininess );
    return ambient + diffuse + spec;
}
vec3 phongModelPreMultiplied( vec4 VertexPosition,vec3 VertexNormal,
		 LightInfo light, MaterialInfo matInfo )
{
    vec3 norm = normalize( VertexNormal);
    vec3 s = normalize(vec3(light.Position - VertexPosition));
    vec3 v = normalize(-VertexPosition.xyz);
    vec3 r = reflect( -s, norm );
    vec3 ambient = light.La * matInfo.Ka;
    float sDotN = max( dot(s,norm), 0.0 );
    vec3 diffuse = light.Ld * matInfo.Kd * sDotN;
    vec3 spec = vec3(0.0);
    if( sDotN > 0.0 )
	spec = light.Ls * matInfo.Ks *
		pow( max( dot(r,v), 0.0 ), matInfo.Shininess );
    return ambient + diffuse + spec;
}
