struct MaterialInfo1D {
    float Ka; // Ambient reflectivity
    float Kd; // Diffuse reflectivity
    float Ks; // Specular reflectivity
    float Shininess; // Specular shininess factor
};

struct LightInfo1D {
    vec4 Position; // Light position in eye coords.
    float La; // Ambient light intensity
    float Ld; // Diffuse light intensity
    float Ls; // Specular light intensity
};
float phongModel1D( vec3 VertexPosition,vec3 VertexNormal,mat3 NormalMatrix ,
		 mat4 ModelViewMatrix,
		 LightInfo1D light, MaterialInfo1D matInfo )
{
    vec3 norm = normalize( NormalMatrix * VertexNormal);
    vec4 position = ModelViewMatrix * vec4(VertexPosition,1.0);
    vec3 s = normalize(vec3(light.Position - position));
    vec3 v = normalize(-position.xyz);
    vec3 r = reflect( -s, norm );
    float ambient = light.La * matInfo.Ka;
    float sDotN = max( dot(s,norm), 0.0 );
    float diffuse = light.Ld * matInfo.Kd * sDotN;
    float spec = 0.0;
    if( sDotN > 0.0 )
	spec = light.Ls * matInfo.Ks *
		pow( max( dot(r,v), 0.0 ), matInfo.Shininess );
    return ambient + diffuse + spec;
}
